package com.project.middleware.restController;

import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.project.LetsTalk.dao.FriendDAO;
import com.project.LetsTalk.model.Friend;
import com.project.LetsTalk.model.User;

@RestController
public class FriendController {
	@Autowired
	FriendDAO friendDAO;
//*************************************send friend request****************************************
	@PostMapping(value="/sendFriendRequest")
	public ResponseEntity<String> sendFriendRequest(@RequestBody Friend friend)
	{
		if(friendDAO.sendFriendRequest(friend))
		{
			return new ResponseEntity<String>("Friend Request Send Successfully",HttpStatus.OK);
		}
		else
		{
			return new ResponseEntity<String>("Cannot Send Riend Request",HttpStatus.NOT_FOUND);
		}
	}
//*************************************show friend list	*****************************************
	@GetMapping(value="/showFriendList")
	public ResponseEntity<List<Friend>> showFriendList(HttpSession session)
	{
		String userName=((User)session.getAttribute("user")).getEmailID();
		List<Friend> listFriends=friendDAO.friendList("user");
		
		if(listFriends.size()>0)
		{
			return new ResponseEntity<List<Friend>>(listFriends,HttpStatus.OK);
		}
		else
		{
			return new ResponseEntity<List<Friend>>(listFriends,HttpStatus.NOT_FOUND);
		}
	}
//*************************************show pending friend request List******************************
	@GetMapping(value="/showPendingFriendRequest")
	public ResponseEntity<List<Friend>> showPendingFriendRequest(HttpSession session)
	{
		String userName=((User)session.getAttribute("user")).getEmailID();
		List<Friend> pendingFriendRequest=friendDAO.pendingFriendRequestList(userName);
		
		if(pendingFriendRequest.size()>0)
		{
			return new ResponseEntity<List<Friend>>(pendingFriendRequest,HttpStatus.OK);
		}
		else
		{
			return new ResponseEntity<List<Friend>>(pendingFriendRequest,HttpStatus.NOT_FOUND);
		}
	}
//************************************show suggested friend List***************************************
	@GetMapping(value="/showSuggestedFriend")
	public ResponseEntity<List<User>> showSuggestedFriend(HttpSession session)
	{
		String emailID=((User)session.getAttribute("user")).getEmailID();
		List<User> showSuggestedFriend=friendDAO.suggestedPeopleList(emailID);
		
		if(showSuggestedFriend.size()>0)
		{
			return new ResponseEntity<List<User>>(showSuggestedFriend,HttpStatus.OK);
		}
		else
		{
			return new ResponseEntity<List<User>>(showSuggestedFriend,HttpStatus.NOT_FOUND);
		}
		
	}
//***********************************accept friend request****************************************
	@GetMapping(value="/acceptFriendRequest/{friendID}")
	public ResponseEntity<String> acceptFriendRequest(@PathVariable("friendID") int friendId)
	{
		if(friendDAO.acceptFriendRequest(friendId))
		{
			return new ResponseEntity<String>("success",HttpStatus.OK);
		}
		else
		{
			return new ResponseEntity<String>("failure",HttpStatus.NOT_FOUND);
		}
	}
//***********************************delete friend request****************************************
	@GetMapping(value="/deleteFriendRequest/{friendID}")
	public ResponseEntity<String> deleteFriendRequest(@PathVariable("friendID") int friendId)
	{
		if(friendDAO.deleteFriendRequest(friendId))
		{
			return new ResponseEntity<String>("success",HttpStatus.OK);
		}
		else
		{
			return new ResponseEntity<String>("failure",HttpStatus.NOT_FOUND);
		}
	}
}
