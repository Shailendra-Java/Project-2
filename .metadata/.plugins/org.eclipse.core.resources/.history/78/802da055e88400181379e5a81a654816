package com.project.middleware.restController;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.project.LetsTalk.dao.JobDAO;
import com.project.LetsTalk.dao.UserDAO;
import com.project.LetsTalk.model.JobApplication;
import com.project.LetsTalk.model.User;

@RestController
public class UserController
{
	@Autowired
	private UserDAO userDAO;
	@Autowired
	private User user;
	@Autowired
	private JobDAO jobDAO;
	@Autowired
	private JobApplication jobApplication;

	
	@GetMapping("/")
	public String serverTest() {
		return "This is my first webservice";
	}
	//------------------CheckLogin-----------------
	@PostMapping("/login")

	public ResponseEntity<User> validateCredentials(@RequestBody User user) {
		System.out.println(user.getEmailID() + user.getPassword());
		user= userDAO.validate(user.getEmailID(), user.getPassword());
		if ( user== null) {
			
			return new ResponseEntity<User>(user, HttpStatus.UNAUTHORIZED);
		} else {
			return new ResponseEntity<User>(user, HttpStatus.OK);
		}

	}
		
		// ----------------- Register User ---------------
		@PostMapping(value = "/registerUser")
		public ResponseEntity<User> registerUser(@RequestBody User user) {
			
			System.out.println("Inside user registration");
			if (userDAO.save(user)) {
				user.setS("OK");
				return new ResponseEntity<User>(user, HttpStatus.OK);
			} else {
				user.setMsg("User registration failed");
				return new ResponseEntity<User>(user, HttpStatus.NOT_FOUND);
			}
		}

		// ------------------------ Update User -----------------------------
		@PutMapping("userUpdate")

		public ResponseEntity<String> updateUser(@RequestBody User user) {
			if (userDAO.get(user.getEmailID()) == null) {
				return new ResponseEntity<String>("no user found", HttpStatus.NOT_FOUND);
			}
		//if user existed
			if(	userDAO.update(user) )
			  {
				return new ResponseEntity<String>("user updated successfully", HttpStatus.OK);
			  }
				return new ResponseEntity<String>("Could not update the details. please try after some time", HttpStatus.INTERNAL_SERVER_ERROR);
			}

		// ------------------------ List Users --------------------------
		@GetMapping(value = "/listUsers")
		public ResponseEntity<List<User>> listUsers() {
			List<User> listUsers = userDAO.list();
			if (listUsers.size() != 0) {
				return new ResponseEntity<List<User>>(listUsers, HttpStatus.OK);
			}
			return new ResponseEntity<List<User>>(listUsers, HttpStatus.NOT_FOUND);
		}

		// ------------------------- Get User ----------------------
		@GetMapping(value = "/getUser/{emailID}")
		public ResponseEntity<User> getUser(@PathVariable("emailID") String emailID) {
			System.out.println(emailID);
			User user = userDAO.get(emailID);
			if (user == null) {
				System.out.println("No user found");
				return new ResponseEntity<User>(user, HttpStatus.NOT_FOUND);
			} else {
				return new ResponseEntity<User>(user, HttpStatus.OK);
			}
		}

		@DeleteMapping(value = "/deleteUser/{emailID}")
		public ResponseEntity<String> deleteUser(@PathVariable("emailID") String emailID) {
			System.out.println("In delete user" + emailID);
			User user = userDAO.get(emailID);
			if (user == null) {
				System.out.println("No user with LoginName " + emailID + " found to delete");
				return new ResponseEntity<String>("No user found to delete", HttpStatus.NOT_FOUND);
			} else {
				userDAO.delete(emailID);
				return new ResponseEntity<String>("User with LoginName " + emailID + " deleted successfully", HttpStatus.OK);
			}
		}
	}